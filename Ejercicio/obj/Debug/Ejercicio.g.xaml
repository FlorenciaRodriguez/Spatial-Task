<?xml version="1.0" encoding="utf-8"?>
<local:Ejercicio xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:local="clr-namespace:Ejercicio;assembly=Ejercicio" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Drawing;assembly=System.Drawing" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Drawing</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>Ejercicio</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <local:Ejercicio.Implementation>
    <StateMachine>
      <StateMachine.InitialState>
        <State x:Name="__ReferenceID19" DisplayName="SetUp">
          <State.Entry>
            <Sequence DisplayName="Inicializar Variables">
              <Assign DisplayName="Archivo de reporte">
                <Assign.To>
                  <OutArgument x:TypeArguments="scg:List(x:String)">
                    <mca:CSharpReference x:TypeArguments="scg:List(x:String)">Reporte</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="scg:List(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:List(x:String)">new List&lt;string&gt;()</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Archivo de recorrido">
                <Assign.To>
                  <OutArgument x:TypeArguments="scg:List(x:String)">
                    <mca:CSharpReference x:TypeArguments="scg:List(x:String)">Recorrido</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="scg:List(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:List(x:String)">new List&lt;string&gt;()</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Cantidad de banderas recolectadas del par">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">IRecoleccion</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">BanderaNueva</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">BanderasCircunferencia.Count</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Cantidad de Iteraciones">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">Iteracion</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Maximo de Iteraciones">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">MaxIteracion</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">Angulo.Length</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Para capturar la bandera y pasar por la cruz">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">Cercania</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">1</InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="sd:PointF">
                    <mca:CSharpReference x:TypeArguments="sd:PointF">Cruz</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="sd:PointF">
                    <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(0,0)</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <If>
                <If.Condition>
                  <InArgument x:TypeArguments="x:Boolean">
                    <mca:CSharpValue x:TypeArguments="x:Boolean">TrainingFlag.Equals("P")</mca:CSharpValue>
                  </InArgument>
                </If.Condition>
                <If.Then>
                  <Assign>
                    <Assign.To>
                      <OutArgument x:TypeArguments="scg:List(sd:PointF)">
                        <mca:CSharpReference x:TypeArguments="scg:List(sd:PointF)">PosicionCruz</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="scg:List(sd:PointF)">
                        <mca:CSharpValue x:TypeArguments="scg:List(sd:PointF)">new List&lt;PointF&gt;()</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </If.Then>
              </If>
            </Sequence>
          </State.Entry>
          <State.Exit>
            <Sequence DisplayName="Salidas">
              <Assign DisplayName="Mesaje a Guardar">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">
                    <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">"Sujeto;" + Sujeto + "\n" + 
                "Radio;" + Radio.ToString() + "\n" + 
                "Hora Inicio;" + DateTime.Now.ToString()</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <WriteLine DisplayName="Mostrar por Consola">
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                </InArgument>
              </WriteLine>
              <AddToCollection x:TypeArguments="x:String" DisplayName="Reporte">
                <AddToCollection.Item>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                  </InArgument>
                </AddToCollection.Item>
                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                </InArgument>
              </AddToCollection>
            </Sequence>
          </State.Exit>
          <State.Transitions>
            <Transition DisplayName="Iniciar Experimento">
              <Transition.Trigger>
                <Sequence DisplayName="Recibir Coordenadas">
                  <local:ReadString BookmarkName="RtaCave">
                    <local:ReadString.Result>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                      </OutArgument>
                    </local:ReadString.Result>
                  </local:ReadString>
                  <If DisplayName="Es un movimiento de joystick o apreto un boton">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length&gt;1</mca:CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="sd:PointF">
                            <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="sd:PointF">
                            <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Then>
                  </If>
                </Sequence>
              </Transition.Trigger>
              <Transition.To>
                <State x:Name="__ReferenceID1" DisplayName="Detenido">
                  <State.Entry>
                    <Sequence>
                      <Sequence DisplayName="Cargar Escena">
                        <If DisplayName="Cargar Escenario null">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">(Iteracion.CompareTo(Escenario.Length)&lt;0 &amp;&amp; Escenario[Iteracion].Equals(0))||(Iteracion.CompareTo(Escenario.Length)&gt;=0)</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <WriteLine DisplayName="WriteLine">
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">"L{ \"id\":\"null\" }"</mca:CSharpValue>
                              </InArgument>
                            </WriteLine>
                          </If.Then>
                          <If.Else>
                            <WriteLine DisplayName="WriteLine">
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">"L{ \"id\":\""+Escenario[Iteracion]+"\" }"</mca:CSharpValue>
                              </InArgument>
                            </WriteLine>
                          </If.Else>
                        </If>
                      </Sequence>
                      <Sequence DisplayName="Ids Par de Banderas">
                        <If>
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">Bandera1.CompareTo(0) &gt; 0</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpReference x:TypeArguments="x:Int32">idIzquierda</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpValue x:TypeArguments="x:Int32">Bandera1</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                          </If.Then>
                          <If.Else>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpReference x:TypeArguments="x:Int32">idIzquierda</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpValue x:TypeArguments="x:Int32">(new Random()).Next(0,BanderasCircunferencia.Count-1)</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                          </If.Else>
                        </If>
                        <If>
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">(TrainingFlag.Equals("T")) &amp;&amp; (Iteracion.CompareTo(Angulo.Length) &lt; 0)</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <If>
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">Bandera1.CompareTo(0)&gt; 0 || Bandera2.CompareTo(0) &gt; 0</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Int32">
                                      <mca:CSharpReference x:TypeArguments="x:Int32">idDerecha</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Int32">
                                      <mca:CSharpValue x:TypeArguments="x:Int32">Bandera2</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                              <If.Else>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Int32">
                                      <mca:CSharpReference x:TypeArguments="x:Int32">idDerecha</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Int32">
                                      <mca:CSharpValue x:TypeArguments="x:Int32">(idIzquierda+(Angulo[Iteracion]/Separacion))%BanderasCircunferencia.Count</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Else>
                            </If>
                          </If.Then>
                        </If>
                        <If>
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">TrainingFlag.Equals("T")</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">
                                  <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">"NroIteracion;" + Iteracion + "\n" + 
    "Angulo;" + Angulo[Iteracion] + "\n" + 
    "A Seleccionar;" + Lateral[Iteracion] + 
    "\n" + "Protocolo;" + Protocolo[Iteracion] + "\n" 
    + "AparecenDeAPares;" + AparecePar[Iteracion] + "\n" + "IdIzquierda;" + idIzquierda + "\nIzquierdaX;" + BanderasCircunferencia.ElementAt(idIzquierda).X + "\n" + "IzquierdaY;" + BanderasCircunferencia.ElementAt(idIzquierda).Y + "\n" + "IdDerecha;" + idDerecha + "\n" + "DerechaX;" + BanderasCircunferencia.ElementAt(idDerecha).X + "\n" + "DerechaY;" + BanderasCircunferencia.ElementAt(idDerecha).Y + "\n"</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                          </If.Then>
                          <If.Else>
                            <If>
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">Iteracion.CompareTo(Protocolo.Length) &lt; 0</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:String">
                                      <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String">
                                      <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">"NroIteracion;" + Iteracion + "\n" + 
 "Protocolo;" +  Protocolo[Iteracion]+ "\n"
+ "IdBandera;" + idIzquierda + 
"\nIdBanderaX;" + BanderasCircunferencia.ElementAt(idIzquierda).X + "\n"
+ "IdBanderaY;" + BanderasCircunferencia.ElementAt(idIzquierda).Y + "\n"</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                              <If.Else>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:String">
                                      <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String">
                                      <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">"NroIteracion;" + Iteracion + "\n" + 
 "IdBandera;" + idIzquierda + 
"\nIdBanderaX;" + BanderasCircunferencia.ElementAt(idIzquierda).X + "\n"
+ "IdBanderaY;" + BanderasCircunferencia.ElementAt(idIzquierda).Y + "\n"</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Else>
                            </If>
                          </If.Else>
                        </If>
                        <Sequence DisplayName="Salidas">
                          <AddToCollection x:TypeArguments="x:String" DisplayName="Reporte">
                            <AddToCollection.Item>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                              </InArgument>
                            </AddToCollection.Item>
                            <InArgument x:TypeArguments="scg:ICollection(x:String)">
                              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                            </InArgument>
                          </AddToCollection>
                          <WriteLine DisplayName="Mostrar por Consola">
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                            </InArgument>
                          </WriteLine>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">
                                <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";DET"</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                            <AddToCollection.Item>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                              </InArgument>
                            </AddToCollection.Item>
                            <InArgument x:TypeArguments="scg:ICollection(x:String)">
                              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                            </InArgument>
                          </AddToCollection>
                          <WriteLine DisplayName="Mostrar por Consola">
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                            </InArgument>
                          </WriteLine>
                        </Sequence>
                        <If>
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">(Iteracion.CompareTo(Lateral.Length) &lt; 0 &amp;&amp; Lateral[Iteracion].Equals("I")) || TrainingFlag.Equals("P")</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence DisplayName="Salida">
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">
                                    <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">"IdCorrecta;" + idIzquierda + "\n" + "CorrectaX;" + BanderasCircunferencia.ElementAt(idIzquierda).X + "\n" + "CorrectaY;" + BanderasCircunferencia.ElementAt(idIzquierda).Y + "\n"</mca:CSharpValue>
                                  </InArgument>
                                </Assign.Value>
                              </Assign>
                              <AddToCollection x:TypeArguments="x:String" DisplayName="Reporte">
                                <AddToCollection.Item>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                  </InArgument>
                                </AddToCollection.Item>
                                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                </InArgument>
                              </AddToCollection>
                              <WriteLine DisplayName="Mostrar por Consola">
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                </InArgument>
                              </WriteLine>
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <If>
                              <If.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">Iteracion.CompareTo(Lateral.Length) &lt; 0 &amp;&amp; Lateral[Iteracion].Equals("D")</mca:CSharpValue>
                                </InArgument>
                              </If.Condition>
                              <If.Then>
                                <Sequence DisplayName="Salida">
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:String">
                                        <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:String">
                                        <mca:CSharpValue x:TypeArguments="x:String">"IdCorrecta;" + idDerecha + "\n" + "CorrectaX;" + BanderasCircunferencia.ElementAt(idDerecha).X + "\n" + "CorrectaY;" + BanderasCircunferencia.ElementAt(idDerecha).Y + "\n"</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <AddToCollection x:TypeArguments="x:String" DisplayName="Reporte">
                                    <AddToCollection.Item>
                                      <InArgument x:TypeArguments="x:String">
                                        <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                      </InArgument>
                                    </AddToCollection.Item>
                                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                    </InArgument>
                                  </AddToCollection>
                                  <WriteLine DisplayName="Mostrar por Consola">
                                    <InArgument x:TypeArguments="x:String">
                                      <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                    </InArgument>
                                  </WriteLine>
                                </Sequence>
                              </If.Then>
                              <If.Else>
                                <Sequence DisplayName="Bandera Correcta">
                                  <If>
                                    <If.Condition>
                                      <InArgument x:TypeArguments="x:Boolean">
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">Iteracion.CompareTo(Angulo.Length)&lt;0</mca:CSharpValue>
                                      </InArgument>
                                    </If.Condition>
                                    <If.Then>
                                      <Assign>
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:Int32">
                                            <mca:CSharpReference x:TypeArguments="x:Int32">idMedio</mca:CSharpReference>
                                          </OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:Int32">
                                            <mca:CSharpValue x:TypeArguments="x:Int32">(idIzquierda + Angulo[Iteracion]/(Separacion*2))%BanderasCircunferencia.Count</mca:CSharpValue>
                                          </InArgument>
                                        </Assign.Value>
                                      </Assign>
                                    </If.Then>
                                  </If>
                                  <Sequence DisplayName="Salida">
                                    <Assign>
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:String">
                                          <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">"IdCorrecta;" + idMedio + "\n" + "CorrectaX;" + BanderasCircunferencia.ElementAt(idMedio).X + "\n" + "CorrectaY;" + BanderasCircunferencia.ElementAt(idMedio).Y + "\n"</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <AddToCollection x:TypeArguments="x:String" DisplayName="Reporte">
                                      <AddToCollection.Item>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                        </InArgument>
                                      </AddToCollection.Item>
                                      <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                        <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                      </InArgument>
                                    </AddToCollection>
                                    <WriteLine DisplayName="Mostrar por Consola">
                                      <InArgument x:TypeArguments="x:String">
                                        <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                      </InArgument>
                                    </WriteLine>
                                  </Sequence>
                                </Sequence>
                              </If.Else>
                            </If>
                          </If.Else>
                        </If>
                      </Sequence>
                    </Sequence>
                  </State.Entry>
                  <State.Exit>
                    <Sequence DisplayName="Cartel comienzo de iteracion">
                      <WriteLine DisplayName="WriteLine">
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Trial "+(int)(Iteracion+1)+" \" }"</mca:CSharpValue>
                        </InArgument>
                      </WriteLine>
                      <Delay>
                        <InArgument x:TypeArguments="x:TimeSpan">
                          <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(2)</mca:CSharpValue>
                        </InArgument>
                      </Delay>
                      <WriteLine Text="hide_question" />
                    </Sequence>
                  </State.Exit>
                  <State.Transitions>
                    <Transition DisplayName="Ir a Capturar">
                      <Transition.Trigger>
                        <Sequence x:Name="__ReferenceID17" DisplayName="Recibir Coordenadas">
                          <local:ReadString BookmarkName="RtaCave">
                            <local:ReadString.Result>
                              <OutArgument x:TypeArguments="x:String">
                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                              </OutArgument>
                            </local:ReadString.Result>
                          </local:ReadString>
                          <If DisplayName="Es un movimiento de joystick o apreto un boton">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length&gt;1</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="sd:PointF">
                                    <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="sd:PointF">
                                    <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                  </InArgument>
                                </Assign.Value>
                              </Assign>
                            </If.Then>
                          </If>
                        </Sequence>
                      </Transition.Trigger>
                      <Transition.To>
                        <State x:Name="__ReferenceID13" DisplayName="Recolectando">
                          <State.Entry>
                            <Sequence DisplayName="Salidas">
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">
                                    <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";REC"</mca:CSharpValue>
                                  </InArgument>
                                </Assign.Value>
                              </Assign>
                              <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                                <AddToCollection.Item>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                  </InArgument>
                                </AddToCollection.Item>
                                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                </InArgument>
                              </AddToCollection>
                              <WriteLine DisplayName="Mostrar por Consola">
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                </InArgument>
                              </WriteLine>
                            </Sequence>
                          </State.Entry>
                          <State.Transitions>
                            <Transition DisplayName="Recolecto bandera">
                              <Transition.Trigger>
                                <Sequence x:Name="__ReferenceID16" DisplayName="Recibir Coordenadas">
                                  <local:ReadString BookmarkName="RtaCave">
                                    <local:ReadString.Result>
                                      <OutArgument x:TypeArguments="x:String">
                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                      </OutArgument>
                                    </local:ReadString.Result>
                                  </local:ReadString>
                                  <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                    <If.Condition>
                                      <InArgument x:TypeArguments="x:Boolean">
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length&gt;1</mca:CSharpValue>
                                      </InArgument>
                                    </If.Condition>
                                    <If.Then>
                                      <Assign>
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="sd:PointF">
                                            <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                          </OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="sd:PointF">
                                            <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                          </InArgument>
                                        </Assign.Value>
                                      </Assign>
                                    </If.Then>
                                  </If>
                                </Sequence>
                              </Transition.Trigger>
                              <Transition.To>
                                <State x:Name="__ReferenceID14" DisplayName="Volviendo">
                                  <State.Exit>
                                    <Sequence DisplayName="Salidas">
                                      <Assign>
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:String">
                                            <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                          </OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:String">
                                            <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";RET"</mca:CSharpValue>
                                          </InArgument>
                                        </Assign.Value>
                                      </Assign>
                                      <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                                        <AddToCollection.Item>
                                          <InArgument x:TypeArguments="x:String">
                                            <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                          </InArgument>
                                        </AddToCollection.Item>
                                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                        </InArgument>
                                      </AddToCollection>
                                      <WriteLine DisplayName="Mostrar por Consola">
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                        </InArgument>
                                      </WriteLine>
                                    </Sequence>
                                  </State.Exit>
                                  <State.Transitions>
                                    <Transition DisplayName="Centro">
                                      <Transition.Trigger>
                                        <Sequence x:Name="__ReferenceID12" DisplayName="Recibir Coordenadas">
                                          <local:ReadString BookmarkName="RtaCave">
                                            <local:ReadString.Result>
                                              <OutArgument x:TypeArguments="x:String">
                                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                              </OutArgument>
                                            </local:ReadString.Result>
                                          </local:ReadString>
                                          <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                            <If.Condition>
                                              <InArgument x:TypeArguments="x:Boolean">
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length&gt;1</mca:CSharpValue>
                                              </InArgument>
                                            </If.Condition>
                                            <If.Then>
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="sd:PointF">
                                                    <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="sd:PointF">
                                                    <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                            </If.Then>
                                          </If>
                                        </Sequence>
                                      </Transition.Trigger>
                                      <Transition.To>
                                        <State x:Name="__ReferenceID18" DisplayName="Evaluando">
                                          <State.Exit>
                                            <Sequence DisplayName="Salidas">
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";EVA"</mca:CSharpValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                              <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                                                <AddToCollection.Item>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                  </InArgument>
                                                </AddToCollection.Item>
                                                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                                </InArgument>
                                              </AddToCollection>
                                              <WriteLine>
                                                <InArgument x:TypeArguments="x:String">
                                                  <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                </InArgument>
                                              </WriteLine>
                                            </Sequence>
                                          </State.Exit>
                                          <State.Transitions>
                                            <Transition DisplayName="Protocolo 1">
                                              <Transition.Trigger>
                                                <Sequence x:Name="__ReferenceID4" DisplayName="Recibir Coordenadas">
                                                  <local:ReadString BookmarkName="RtaCave">
                                                    <local:ReadString.Result>
                                                      <OutArgument x:TypeArguments="x:String">
                                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                      </OutArgument>
                                                    </local:ReadString.Result>
                                                  </local:ReadString>
                                                  <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                                    <If.Condition>
                                                      <InArgument x:TypeArguments="x:Boolean">
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length&gt;1</mca:CSharpValue>
                                                      </InArgument>
                                                    </If.Condition>
                                                    <If.Then>
                                                      <Assign>
                                                        <Assign.To>
                                                          <OutArgument x:TypeArguments="sd:PointF">
                                                            <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                          </OutArgument>
                                                        </Assign.To>
                                                        <Assign.Value>
                                                          <InArgument x:TypeArguments="sd:PointF">
                                                            <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                          </InArgument>
                                                        </Assign.Value>
                                                      </Assign>
                                                    </If.Then>
                                                  </If>
                                                </Sequence>
                                              </Transition.Trigger>
                                              <Transition.To>
                                                <State x:Name="__ReferenceID20" DisplayName="Protocolo 1">
                                                  <State.Entry>
                                                    <Sequence DisplayName="Salidas">
                                                      <Assign>
                                                        <Assign.To>
                                                          <OutArgument x:TypeArguments="x:String">
                                                            <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                          </OutArgument>
                                                        </Assign.To>
                                                        <Assign.Value>
                                                          <InArgument x:TypeArguments="x:String">
                                                            <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";PR1"</mca:CSharpValue>
                                                          </InArgument>
                                                        </Assign.Value>
                                                      </Assign>
                                                      <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                                                        <AddToCollection.Item>
                                                          <InArgument x:TypeArguments="x:String">
                                                            <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                          </InArgument>
                                                        </AddToCollection.Item>
                                                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                                        </InArgument>
                                                      </AddToCollection>
                                                      <WriteLine DisplayName="Pantalla">
                                                        <InArgument x:TypeArguments="x:String">
                                                          <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                        </InArgument>
                                                      </WriteLine>
                                                    </Sequence>
                                                  </State.Entry>
                                                  <State.Transitions>
                                                    <Transition DisplayName="Eligio bandera">
                                                      <Transition.Trigger>
                                                        <Sequence DisplayName="Recibir Coordenadas">
                                                          <local:ReadString BookmarkName="RtaCave">
                                                            <local:ReadString.Result>
                                                              <OutArgument x:TypeArguments="x:String">
                                                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                              </OutArgument>
                                                            </local:ReadString.Result>
                                                          </local:ReadString>
                                                          <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                                            <If.Condition>
                                                              <InArgument x:TypeArguments="x:Boolean">
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length&gt;1</mca:CSharpValue>
                                                              </InArgument>
                                                            </If.Condition>
                                                            <If.Then>
                                                              <Assign>
                                                                <Assign.To>
                                                                  <OutArgument x:TypeArguments="sd:PointF">
                                                                    <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                                  </OutArgument>
                                                                </Assign.To>
                                                                <Assign.Value>
                                                                  <InArgument x:TypeArguments="sd:PointF">
                                                                    <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                                  </InArgument>
                                                                </Assign.Value>
                                                              </Assign>
                                                            </If.Then>
                                                          </If>
                                                        </Sequence>
                                                      </Transition.Trigger>
                                                      <Transition.To>
                                                        <State x:Name="__ReferenceID7" DisplayName="Termino Test de Memoria">
                                                          <State.Entry>
                                                            <Sequence>
                                                              <Sequence>
                                                                <Sequence DisplayName="Salidas">
                                                                  <Assign>
                                                                    <Assign.To>
                                                                      <OutArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </Assign.To>
                                                                    <Assign.Value>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">"Hora Fin Seleccion;" + DateTime.Now.ToString() + "\n" +
                "Bandera Seleccionada [id];" + BanderaSeleccionadaID + "\n" +
                    "Bandera Seleccionada [X];" + BanderaSeleccionadaPos.X + "\n" +
                    "Bandera Seleccionada [Y];" + BanderaSeleccionadaPos.Y</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </Assign.Value>
                                                                  </Assign>
                                                                  <AddToCollection x:TypeArguments="x:String" DisplayName="Reporte">
                                                                    <AddToCollection.Item>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </AddToCollection.Item>
                                                                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </AddToCollection>
                                                                  <WriteLine DisplayName="Consola">
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </WriteLine>
                                                                  <Assign>
                                                                    <Assign.To>
                                                                      <OutArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </Assign.To>
                                                                    <Assign.Value>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";PR3"</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </Assign.Value>
                                                                  </Assign>
                                                                  <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                                                                    <AddToCollection.Item>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </AddToCollection.Item>
                                                                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </AddToCollection>
                                                                  <WriteLine DisplayName="Consola">
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </WriteLine>
                                                                </Sequence>
                                                                <Assign DisplayName="Aumentar iteracion">
                                                                  <Assign.To>
                                                                    <OutArgument x:TypeArguments="x:Int32">
                                                                      <mca:CSharpReference x:TypeArguments="x:Int32">Iteracion</mca:CSharpReference>
                                                                    </OutArgument>
                                                                  </Assign.To>
                                                                  <Assign.Value>
                                                                    <InArgument x:TypeArguments="x:Int32">
                                                                      <mca:CSharpValue x:TypeArguments="x:Int32">Iteracion+1</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </Assign.Value>
                                                                </Assign>
                                                                <WriteLine Text="hide_question" />
                                                              </Sequence>
                                                              <If>
                                                                <If.Condition>
                                                                  <InArgument x:TypeArguments="x:Boolean">
                                                                    <mca:CSharpValue x:TypeArguments="x:Boolean">TrainingFlag.Equals("P")</mca:CSharpValue>
                                                                  </InArgument>
                                                                </If.Condition>
                                                                <If.Then>
                                                                  <Sequence>
                                                                    <WriteLine DisplayName="WriteLine">
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Finish the experiment? Y(yes) X(no)\" }"</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </WriteLine>
                                                                    <Delay>
                                                                      <InArgument x:TypeArguments="x:TimeSpan">
                                                                        <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(2)</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </Delay>
                                                                  </Sequence>
                                                                </If.Then>
                                                              </If>
                                                            </Sequence>
                                                          </State.Entry>
                                                          <State.Transitions>
                                                            <Transition DisplayName="No seguir iternado">
                                                              <Transition.Trigger>
                                                                <Sequence x:Name="__ReferenceID0" DisplayName="Recibir Coordenadas">
                                                                  <local:ReadString BookmarkName="RtaCave">
                                                                    <local:ReadString.Result>
                                                                      <OutArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </local:ReadString.Result>
                                                                  </local:ReadString>
                                                                  <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                                                    <If.Condition>
                                                                      <InArgument x:TypeArguments="x:Boolean">
                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length&gt;1</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </If.Condition>
                                                                    <If.Then>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="sd:PointF">
                                                                            <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="sd:PointF">
                                                                            <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                    </If.Then>
                                                                  </If>
                                                                </Sequence>
                                                              </Transition.Trigger>
                                                              <Transition.Condition>
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">(TrainingFlag.Equals("T") &amp;&amp; !(Iteracion.CompareTo(Angulo.Length - 1) &lt; 0)) || (TrainingFlag.Equals("P") &amp;&amp; RtaCave.Equals("1"))</mca:CSharpValue>
                                                              </Transition.Condition>
                                                              <Transition.To>
                                                                <State x:Name="__ReferenceID15" DisplayName="Fin" IsFinal="True">
                                                                  <State.Entry>
                                                                    <Sequence>
                                                                      <If>
                                                                        <If.Condition>
                                                                          <InArgument x:TypeArguments="x:Boolean">
                                                                            <mca:CSharpValue x:TypeArguments="x:Boolean">!(Evaluar[Iteracion].Equals(2))</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </If.Condition>
                                                                        <If.Then>
                                                                          <Sequence>
                                                                            <WriteLine>
                                                                              <InArgument x:TypeArguments="x:String">
                                                                                <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Finished\" }"</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </WriteLine>
                                                                            <Delay>
                                                                              <InArgument x:TypeArguments="x:TimeSpan">
                                                                                <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(2)</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </Delay>
                                                                            <WriteLine Text="hide_question" />
                                                                          </Sequence>
                                                                        </If.Then>
                                                                        <If.Else>
                                                                          <WriteLine>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Finished\" }"</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </WriteLine>
                                                                        </If.Else>
                                                                      </If>
                                                                    </Sequence>
                                                                  </State.Entry>
                                                                </State>
                                                              </Transition.To>
                                                            </Transition>
                                                            <Transition Trigger="{x:Reference __ReferenceID0}" DisplayName="Seguir Iterando">
                                                              <Transition.To>
                                                                <State x:Name="__ReferenceID3" DisplayName="Ir a la Cruz">
                                                                  <State.Transitions>
                                                                    <Transition DisplayName="Llega a la cruz">
                                                                      <Transition.Trigger>
                                                                        <Sequence x:Name="__ReferenceID2" DisplayName="Recibir Coordenadas">
                                                                          <local:ReadString BookmarkName="RtaCave">
                                                                            <local:ReadString.Result>
                                                                              <OutArgument x:TypeArguments="x:String">
                                                                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                                              </OutArgument>
                                                                            </local:ReadString.Result>
                                                                          </local:ReadString>
                                                                          <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                                                            <If.Condition>
                                                                              <InArgument x:TypeArguments="x:Boolean">
                                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length&gt;1</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </If.Condition>
                                                                            <If.Then>
                                                                              <Assign>
                                                                                <Assign.To>
                                                                                  <OutArgument x:TypeArguments="sd:PointF">
                                                                                    <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                                                  </OutArgument>
                                                                                </Assign.To>
                                                                                <Assign.Value>
                                                                                  <InArgument x:TypeArguments="sd:PointF">
                                                                                    <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                                                  </InArgument>
                                                                                </Assign.Value>
                                                                              </Assign>
                                                                            </If.Then>
                                                                          </If>
                                                                        </Sequence>
                                                                      </Transition.Trigger>
                                                                      <Transition.To>
                                                                        <x:Reference>__ReferenceID1</x:Reference>
                                                                      </Transition.To>
                                                                      <Transition.Condition>
                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">TrainingFlag.Equals("T") || (TrainingFlag.Equals("P")&amp;&amp;Math.Sqrt((Math.Pow(Coordenadas.X - Cruz.X, 2)) + Math.Pow(Coordenadas.Y - Cruz.Y, 2)) &lt; Cercania)</mca:CSharpValue>
                                                                      </Transition.Condition>
                                                                    </Transition>
                                                                    <Transition Trigger="{x:Reference __ReferenceID2}" DisplayName="No llego a la cruz" To="{x:Reference __ReferenceID3}">
                                                                      <Transition.Condition>
                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">(TrainingFlag.Equals("P"))&amp;&amp;!(Math.Sqrt((Math.Pow(Coordenadas.X - Cruz.X, 2)) + Math.Pow(Coordenadas.Y - Cruz.Y, 2)) &lt; Cercania)</mca:CSharpValue>
                                                                      </Transition.Condition>
                                                                    </Transition>
                                                                  </State.Transitions>
                                                                </State>
                                                              </Transition.To>
                                                              <Transition.Action>
                                                                <Sequence>
                                                                  <If>
                                                                    <If.Condition>
                                                                      <InArgument x:TypeArguments="x:Boolean">
                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">((Iteracion).CompareTo(Color.Length) &lt; 0) &amp;&amp; !(Color[Iteracion].Equals(Color[Iteracion-1]))</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </If.Condition>
                                                                    <If.Then>
                                                                      <Sequence DisplayName="Cambiar Color">
                                                                        <Sequence.Variables>
                                                                          <Variable x:TypeArguments="x:Int32" Name="i" />
                                                                        </Sequence.Variables>
                                                                        <Assign>
                                                                          <Assign.To>
                                                                            <OutArgument x:TypeArguments="x:Int32">
                                                                              <mca:CSharpReference x:TypeArguments="x:Int32">i</mca:CSharpReference>
                                                                            </OutArgument>
                                                                          </Assign.To>
                                                                          <Assign.Value>
                                                                            <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                                                          </Assign.Value>
                                                                        </Assign>
                                                                        <While>
                                                                          <While.Condition>
                                                                            <mca:CSharpValue x:TypeArguments="x:Boolean">i&lt;BanderasCircunferencia.Count</mca:CSharpValue>
                                                                          </While.Condition>
                                                                          <Sequence>
                                                                            <Parallel>
                                                                              <WriteLine>
                                                                                <InArgument x:TypeArguments="x:String">
                                                                                  <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(i) + "\", \"color\":\"" + Color[Iteracion] + "\" }"</mca:CSharpValue>
                                                                                </InArgument>
                                                                              </WriteLine>
                                                                            </Parallel>
                                                                            <Assign>
                                                                              <Assign.To>
                                                                                <OutArgument x:TypeArguments="x:Int32">
                                                                                  <mca:CSharpReference x:TypeArguments="x:Int32">i</mca:CSharpReference>
                                                                                </OutArgument>
                                                                              </Assign.To>
                                                                              <Assign.Value>
                                                                                <InArgument x:TypeArguments="x:Int32">
                                                                                  <mca:CSharpValue x:TypeArguments="x:Int32">i+1</mca:CSharpValue>
                                                                                </InArgument>
                                                                              </Assign.Value>
                                                                            </Assign>
                                                                          </Sequence>
                                                                        </While>
                                                                      </Sequence>
                                                                    </If.Then>
                                                                  </If>
                                                                  <If>
                                                                    <If.Condition>
                                                                      <InArgument x:TypeArguments="x:Boolean">
                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">TrainingFlag.Equals("P")</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </If.Condition>
                                                                    <If.Then>
                                                                      <Sequence DisplayName="Cambiar Cruz">
                                                                        <Sequence DisplayName="Generar Cruz">
                                                                          <Sequence.Variables>
                                                                            <Variable x:TypeArguments="s:Random" Name="RandomX" />
                                                                            <Variable x:TypeArguments="s:Random" Name="RandomY" />
                                                                            <Variable x:TypeArguments="x:String" Name="variable2" />
                                                                            <Variable x:TypeArguments="x:Int32" Name="CruzX" />
                                                                            <Variable x:TypeArguments="x:Int32" Name="CruzY" />
                                                                          </Sequence.Variables>
                                                                          <Assign>
                                                                            <Assign.To>
                                                                              <OutArgument x:TypeArguments="s:Random">
                                                                                <mca:CSharpReference x:TypeArguments="s:Random">RandomX</mca:CSharpReference>
                                                                              </OutArgument>
                                                                            </Assign.To>
                                                                            <Assign.Value>
                                                                              <InArgument x:TypeArguments="s:Random">
                                                                                <mca:CSharpValue x:TypeArguments="s:Random">new Random()</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </Assign.Value>
                                                                          </Assign>
                                                                          <Assign>
                                                                            <Assign.To>
                                                                              <OutArgument x:TypeArguments="s:Random">
                                                                                <mca:CSharpReference x:TypeArguments="s:Random">RandomY</mca:CSharpReference>
                                                                              </OutArgument>
                                                                            </Assign.To>
                                                                            <Assign.Value>
                                                                              <InArgument x:TypeArguments="s:Random">
                                                                                <mca:CSharpValue x:TypeArguments="s:Random">new Random()</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </Assign.Value>
                                                                          </Assign>
                                                                          <Assign>
                                                                            <Assign.To>
                                                                              <OutArgument x:TypeArguments="x:Int32">
                                                                                <mca:CSharpReference x:TypeArguments="x:Int32">CruzX</mca:CSharpReference>
                                                                              </OutArgument>
                                                                            </Assign.To>
                                                                            <Assign.Value>
                                                                              <InArgument x:TypeArguments="x:Int32">
                                                                                <mca:CSharpValue x:TypeArguments="x:Int32">RandomX.Next(-13,13)</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </Assign.Value>
                                                                          </Assign>
                                                                          <Assign>
                                                                            <Assign.To>
                                                                              <OutArgument x:TypeArguments="x:Int32">
                                                                                <mca:CSharpReference x:TypeArguments="x:Int32">CruzY</mca:CSharpReference>
                                                                              </OutArgument>
                                                                            </Assign.To>
                                                                            <Assign.Value>
                                                                              <InArgument x:TypeArguments="x:Int32">
                                                                                <mca:CSharpValue x:TypeArguments="x:Int32">RandomY.Next(-13, 13)</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </Assign.Value>
                                                                          </Assign>
                                                                          <While>
                                                                            <While.Condition>
                                                                              <mca:CSharpValue x:TypeArguments="x:Boolean">(Math.Sqrt(Math.Pow(Cruz.X-CruzX,2)+Math.Pow(Cruz.Y-CruzY,2))&lt;Cercania) || (PosicionCruz.Contains(new PointF(CruzX,CruzY)))</mca:CSharpValue>
                                                                            </While.Condition>
                                                                            <Sequence>
                                                                              <Assign>
                                                                                <Assign.To>
                                                                                  <OutArgument x:TypeArguments="x:Int32">
                                                                                    <mca:CSharpReference x:TypeArguments="x:Int32">CruzX</mca:CSharpReference>
                                                                                  </OutArgument>
                                                                                </Assign.To>
                                                                                <Assign.Value>
                                                                                  <InArgument x:TypeArguments="x:Int32">
                                                                                    <mca:CSharpValue x:TypeArguments="x:Int32">RandomX.Next(-13,13)</mca:CSharpValue>
                                                                                  </InArgument>
                                                                                </Assign.Value>
                                                                              </Assign>
                                                                              <Assign>
                                                                                <Assign.To>
                                                                                  <OutArgument x:TypeArguments="x:Int32">
                                                                                    <mca:CSharpReference x:TypeArguments="x:Int32">CruzY</mca:CSharpReference>
                                                                                  </OutArgument>
                                                                                </Assign.To>
                                                                                <Assign.Value>
                                                                                  <InArgument x:TypeArguments="x:Int32">
                                                                                    <mca:CSharpValue x:TypeArguments="x:Int32">RandomY.Next(-13,13)</mca:CSharpValue>
                                                                                  </InArgument>
                                                                                </Assign.Value>
                                                                              </Assign>
                                                                            </Sequence>
                                                                          </While>
                                                                          <AddToCollection x:TypeArguments="sd:PointF">
                                                                            <AddToCollection.Item>
                                                                              <InArgument x:TypeArguments="sd:PointF">
                                                                                <mca:CSharpValue x:TypeArguments="sd:PointF">Cruz</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </AddToCollection.Item>
                                                                            <InArgument x:TypeArguments="scg:ICollection(sd:PointF)">
                                                                              <mca:CSharpValue x:TypeArguments="scg:ICollection(sd:PointF)">PosicionCruz</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </AddToCollection>
                                                                          <Assign>
                                                                            <Assign.To>
                                                                              <OutArgument x:TypeArguments="x:Single">
                                                                                <mca:CSharpReference x:TypeArguments="x:Single">Cruz.X</mca:CSharpReference>
                                                                              </OutArgument>
                                                                            </Assign.To>
                                                                            <Assign.Value>
                                                                              <InArgument x:TypeArguments="x:Single">
                                                                                <mca:CSharpValue x:TypeArguments="x:Single">CruzX</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </Assign.Value>
                                                                          </Assign>
                                                                          <Assign>
                                                                            <Assign.To>
                                                                              <OutArgument x:TypeArguments="x:Single">
                                                                                <mca:CSharpReference x:TypeArguments="x:Single">Cruz.Y</mca:CSharpReference>
                                                                              </OutArgument>
                                                                            </Assign.To>
                                                                            <Assign.Value>
                                                                              <InArgument x:TypeArguments="x:Single">
                                                                                <mca:CSharpValue x:TypeArguments="x:Single">CruzY</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </Assign.Value>
                                                                          </Assign>
                                                                          <Sequence DisplayName="Salida">
                                                                            <Assign>
                                                                              <Assign.To>
                                                                                <OutArgument x:TypeArguments="x:String">
                                                                                  <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                                                </OutArgument>
                                                                              </Assign.To>
                                                                              <Assign.Value>
                                                                                <InArgument x:TypeArguments="x:String">
                                                                                  <mca:CSharpValue x:TypeArguments="x:String">"CruzX;"+CruzX+"\nCruzY;"+CruzY</mca:CSharpValue>
                                                                                </InArgument>
                                                                              </Assign.Value>
                                                                            </Assign>
                                                                            <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                                              <AddToCollection.Item>
                                                                                <InArgument x:TypeArguments="x:String">
                                                                                  <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                                </InArgument>
                                                                              </AddToCollection.Item>
                                                                              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </AddToCollection>
                                                                            <WriteLine>
                                                                              <InArgument x:TypeArguments="x:String">
                                                                                <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </WriteLine>
                                                                          </Sequence>
                                                                        </Sequence>
                                                                        <WriteLine Text="hide_question" />
                                                                        <WriteLine>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <mca:CSharpValue x:TypeArguments="x:String">"M{ \"x\":\""+Cruz.X+"\", \"y\":\""+Cruz.Y+"\" }"</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </WriteLine>
                                                                      </Sequence>
                                                                    </If.Then>
                                                                  </If>
                                                                </Sequence>
                                                              </Transition.Action>
                                                              <Transition.Condition>
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">(TrainingFlag.Equals("P")&amp;&amp;RtaCave.Equals("2"))||(TrainingFlag.Equals("T")&amp;&amp;(Iteracion.CompareTo(Angulo.Length - 1) &lt; 0))</mca:CSharpValue>
                                                              </Transition.Condition>
                                                            </Transition>
                                                          </State.Transitions>
                                                        </State>
                                                      </Transition.To>
                                                      <Transition.Action>
                                                        <Sequence>
                                                          <If>
                                                            <If.Condition>
                                                              <InArgument x:TypeArguments="x:Boolean">
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("2")</mca:CSharpValue>
                                                              </InArgument>
                                                            </If.Condition>
                                                            <If.Then>
                                                              <Sequence DisplayName="Salidas">
                                                                <Assign>
                                                                  <Assign.To>
                                                                    <OutArgument x:TypeArguments="x:String">
                                                                      <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                                    </OutArgument>
                                                                  </Assign.To>
                                                                  <Assign.Value>
                                                                    <InArgument x:TypeArguments="x:String">Respuesta;SI</InArgument>
                                                                  </Assign.Value>
                                                                </Assign>
                                                                <AddToCollection x:TypeArguments="x:String" DisplayName="Respuesta">
                                                                  <AddToCollection.Item>
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </AddToCollection.Item>
                                                                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                                                  </InArgument>
                                                                </AddToCollection>
                                                                <WriteLine DisplayName="Pantalla">
                                                                  <InArgument x:TypeArguments="x:String">
                                                                    <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                  </InArgument>
                                                                </WriteLine>
                                                              </Sequence>
                                                            </If.Then>
                                                            <If.Else>
                                                              <Sequence DisplayName="Salidas">
                                                                <Assign>
                                                                  <Assign.To>
                                                                    <OutArgument x:TypeArguments="x:String">
                                                                      <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                                    </OutArgument>
                                                                  </Assign.To>
                                                                  <Assign.Value>
                                                                    <InArgument x:TypeArguments="x:String">Respuesta;NO</InArgument>
                                                                  </Assign.Value>
                                                                </Assign>
                                                                <AddToCollection x:TypeArguments="x:String" DisplayName="Respuesta">
                                                                  <AddToCollection.Item>
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </AddToCollection.Item>
                                                                  <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                    <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                                                  </InArgument>
                                                                </AddToCollection>
                                                                <WriteLine DisplayName="Pantalla">
                                                                  <InArgument x:TypeArguments="x:String">
                                                                    <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                  </InArgument>
                                                                </WriteLine>
                                                              </Sequence>
                                                            </If.Else>
                                                          </If>
                                                          <WriteLine DisplayName="WriteLine">
                                                            <InArgument x:TypeArguments="x:String">
                                                              <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" +BanderaSeleccionadaID + "\", \"visible\":\"false\" }"</mca:CSharpValue>
                                                            </InArgument>
                                                          </WriteLine>
                                                        </Sequence>
                                                      </Transition.Action>
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("1")||RtaCave.Equals("2")</mca:CSharpValue>
                                                      </Transition.Condition>
                                                    </Transition>
                                                  </State.Transitions>
                                                </State>
                                              </Transition.To>
                                              <Transition.Action>
                                                <Sequence>
                                                  <WriteLine DisplayName="WriteLine">
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Escucha la pregunta\" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <Delay>
                                                    <InArgument x:TypeArguments="x:TimeSpan">
                                                      <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(2)</mca:CSharpValue>
                                                    </InArgument>
                                                  </Delay>
                                                  <WriteLine Text="hide_question" />
                                                  <WriteLine DisplayName="WriteLine">
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Y(si) o X(no)\" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <If>
                                                    <If.Condition>
                                                      <InArgument x:TypeArguments="x:Boolean">
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">Lateral[Iteracion].Equals("I")</mca:CSharpValue>
                                                      </InArgument>
                                                    </If.Condition>
                                                    <If.Then>
                                                      <Sequence>
                                                        <WriteLine>
                                                          <InArgument x:TypeArguments="x:String">
                                                            <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + idIzquierda+ "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                                          </InArgument>
                                                        </WriteLine>
                                                        <Assign>
                                                          <Assign.To>
                                                            <OutArgument x:TypeArguments="sd:PointF">
                                                              <mca:CSharpReference x:TypeArguments="sd:PointF">BanderaSeleccionadaPos</mca:CSharpReference>
                                                            </OutArgument>
                                                          </Assign.To>
                                                          <Assign.Value>
                                                            <InArgument x:TypeArguments="sd:PointF">
                                                              <mca:CSharpValue x:TypeArguments="sd:PointF">BanderasCircunferencia.ElementAt(idIzquierda)</mca:CSharpValue>
                                                            </InArgument>
                                                          </Assign.Value>
                                                        </Assign>
                                                        <Assign>
                                                          <Assign.To>
                                                            <OutArgument x:TypeArguments="x:Int32">
                                                              <mca:CSharpReference x:TypeArguments="x:Int32">BanderaSeleccionadaID</mca:CSharpReference>
                                                            </OutArgument>
                                                          </Assign.To>
                                                          <Assign.Value>
                                                            <InArgument x:TypeArguments="x:Int32">
                                                              <mca:CSharpValue x:TypeArguments="x:Int32">idIzquierda</mca:CSharpValue>
                                                            </InArgument>
                                                          </Assign.Value>
                                                        </Assign>
                                                      </Sequence>
                                                    </If.Then>
                                                    <If.Else>
                                                      <If>
                                                        <If.Condition>
                                                          <InArgument x:TypeArguments="x:Boolean">
                                                            <mca:CSharpValue x:TypeArguments="x:Boolean">Lateral[Iteracion].Equals("D")</mca:CSharpValue>
                                                          </InArgument>
                                                        </If.Condition>
                                                        <If.Then>
                                                          <Sequence>
                                                            <WriteLine>
                                                              <InArgument x:TypeArguments="x:String">
                                                                <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + idDerecha + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                                              </InArgument>
                                                            </WriteLine>
                                                            <Assign>
                                                              <Assign.To>
                                                                <OutArgument x:TypeArguments="sd:PointF">
                                                                  <mca:CSharpReference x:TypeArguments="sd:PointF">BanderaSeleccionadaPos</mca:CSharpReference>
                                                                </OutArgument>
                                                              </Assign.To>
                                                              <Assign.Value>
                                                                <InArgument x:TypeArguments="sd:PointF">
                                                                  <mca:CSharpValue x:TypeArguments="sd:PointF">BanderasCircunferencia.ElementAt(idDerecha)</mca:CSharpValue>
                                                                </InArgument>
                                                              </Assign.Value>
                                                            </Assign>
                                                            <Assign>
                                                              <Assign.To>
                                                                <OutArgument x:TypeArguments="x:Int32">
                                                                  <mca:CSharpReference x:TypeArguments="x:Int32">BanderaSeleccionadaID</mca:CSharpReference>
                                                                </OutArgument>
                                                              </Assign.To>
                                                              <Assign.Value>
                                                                <InArgument x:TypeArguments="x:Int32">
                                                                  <mca:CSharpValue x:TypeArguments="x:Int32">idDerecha</mca:CSharpValue>
                                                                </InArgument>
                                                              </Assign.Value>
                                                            </Assign>
                                                          </Sequence>
                                                        </If.Then>
                                                        <If.Else>
                                                          <Sequence>
                                                            <WriteLine>
                                                              <InArgument x:TypeArguments="x:String">
                                                                <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" +idMedio+ "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                                              </InArgument>
                                                            </WriteLine>
                                                            <Assign>
                                                              <Assign.To>
                                                                <OutArgument x:TypeArguments="sd:PointF">
                                                                  <mca:CSharpReference x:TypeArguments="sd:PointF">BanderaSeleccionadaPos</mca:CSharpReference>
                                                                </OutArgument>
                                                              </Assign.To>
                                                              <Assign.Value>
                                                                <InArgument x:TypeArguments="sd:PointF">
                                                                  <mca:CSharpValue x:TypeArguments="sd:PointF">BanderasCircunferencia.ElementAt(idMedio)</mca:CSharpValue>
                                                                </InArgument>
                                                              </Assign.Value>
                                                            </Assign>
                                                            <Assign>
                                                              <Assign.To>
                                                                <OutArgument x:TypeArguments="x:Int32">
                                                                  <mca:CSharpReference x:TypeArguments="x:Int32">BanderaSeleccionadaID</mca:CSharpReference>
                                                                </OutArgument>
                                                              </Assign.To>
                                                              <Assign.Value>
                                                                <InArgument x:TypeArguments="x:Int32">
                                                                  <mca:CSharpValue x:TypeArguments="x:Int32">idMedio</mca:CSharpValue>
                                                                </InArgument>
                                                              </Assign.Value>
                                                            </Assign>
                                                          </Sequence>
                                                        </If.Else>
                                                      </If>
                                                    </If.Else>
                                                  </If>
                                                </Sequence>
                                              </Transition.Action>
                                              <Transition.Condition>
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">Iteracion.CompareTo(Protocolo.Length)&lt;0 &amp;&amp; Protocolo[Iteracion].Equals(1)</mca:CSharpValue>
                                              </Transition.Condition>
                                            </Transition>
                                            <Transition Trigger="{x:Reference __ReferenceID4}" DisplayName="Protocolo 2">
                                              <Transition.To>
                                                <State x:Name="__ReferenceID5" DisplayName="Seleccionando Bandera">
                                                  <State.Entry>
                                                    <Sequence DisplayName="Cambiar color Bandera de Cursor">
                                                      <WriteLine>
                                                        <InArgument x:TypeArguments="x:String">
                                                          <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"azul\" }"</mca:CSharpValue>
                                                        </InArgument>
                                                      </WriteLine>
                                                    </Sequence>
                                                  </State.Entry>
                                                  <State.Exit>
                                                    <Sequence DisplayName="Salidas">
                                                      <Assign>
                                                        <Assign.To>
                                                          <OutArgument x:TypeArguments="x:String">
                                                            <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                          </OutArgument>
                                                        </Assign.To>
                                                        <Assign.Value>
                                                          <InArgument x:TypeArguments="x:String">
                                                            <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";PR2"</mca:CSharpValue>
                                                          </InArgument>
                                                        </Assign.Value>
                                                      </Assign>
                                                      <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                                                        <AddToCollection.Item>
                                                          <InArgument x:TypeArguments="x:String">
                                                            <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                          </InArgument>
                                                        </AddToCollection.Item>
                                                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                                        </InArgument>
                                                      </AddToCollection>
                                                      <WriteLine DisplayName="Pantalla">
                                                        <InArgument x:TypeArguments="x:String">
                                                          <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                        </InArgument>
                                                      </WriteLine>
                                                    </Sequence>
                                                  </State.Exit>
                                                  <State.Transitions>
                                                    <Transition DisplayName="Seguir Seleccionando">
                                                      <Transition.Trigger>
                                                        <Sequence x:Name="__ReferenceID6" DisplayName="Recibir Coordenadas">
                                                          <local:ReadString BookmarkName="RtaCave">
                                                            <local:ReadString.Result>
                                                              <OutArgument x:TypeArguments="x:String">
                                                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                              </OutArgument>
                                                            </local:ReadString.Result>
                                                          </local:ReadString>
                                                          <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                                            <If.Condition>
                                                              <InArgument x:TypeArguments="x:Boolean">
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length&gt;1</mca:CSharpValue>
                                                              </InArgument>
                                                            </If.Condition>
                                                            <If.Then>
                                                              <Assign>
                                                                <Assign.To>
                                                                  <OutArgument x:TypeArguments="sd:PointF">
                                                                    <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                                  </OutArgument>
                                                                </Assign.To>
                                                                <Assign.Value>
                                                                  <InArgument x:TypeArguments="sd:PointF">
                                                                    <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                                  </InArgument>
                                                                </Assign.Value>
                                                              </Assign>
                                                            </If.Then>
                                                          </If>
                                                        </Sequence>
                                                      </Transition.Trigger>
                                                      <Transition.To>
                                                        <x:Reference>__ReferenceID5</x:Reference>
                                                      </Transition.To>
                                                      <Transition.Action>
                                                        <Sequence DisplayName="Mover Cursor">
                                                          <If>
                                                            <If.Condition>
                                                              <InArgument x:TypeArguments="x:Boolean">
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">Iteracion.CompareTo(Color.Length)&lt;0</mca:CSharpValue>
                                                              </InArgument>
                                                            </If.Condition>
                                                            <If.Then>
                                                              <WriteLine>
                                                                <InArgument x:TypeArguments="x:String">
                                                                  <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"" + Color[Iteracion] + "\" }"</mca:CSharpValue>
                                                                </InArgument>
                                                              </WriteLine>
                                                            </If.Then>
                                                            <If.Else>
                                                              <WriteLine>
                                                                <InArgument x:TypeArguments="x:String">
                                                                  <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"rojo\" }"</mca:CSharpValue>
                                                                </InArgument>
                                                              </WriteLine>
                                                            </If.Else>
                                                          </If>
                                                          <If>
                                                            <If.Condition>
                                                              <InArgument x:TypeArguments="x:Boolean">
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("1")</mca:CSharpValue>
                                                              </InArgument>
                                                            </If.Condition>
                                                            <If.Then>
                                                              <Sequence DisplayName="Mover Cursor">
                                                                <Assign>
                                                                  <Assign.To>
                                                                    <OutArgument x:TypeArguments="x:Int32">
                                                                      <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                                    </OutArgument>
                                                                  </Assign.To>
                                                                  <Assign.Value>
                                                                    <InArgument x:TypeArguments="x:Int32">
                                                                      <mca:CSharpValue x:TypeArguments="x:Int32">(Cursor - 1) % BanderasCircunferencia.Count</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </Assign.Value>
                                                                </Assign>
                                                                <If>
                                                                  <If.Condition>
                                                                    <InArgument x:TypeArguments="x:Boolean">
                                                                      <mca:CSharpValue x:TypeArguments="x:Boolean">Cursor&lt;0</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </If.Condition>
                                                                  <If.Then>
                                                                    <Assign>
                                                                      <Assign.To>
                                                                        <OutArgument x:TypeArguments="x:Int32">
                                                                          <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                                        </OutArgument>
                                                                      </Assign.To>
                                                                      <Assign.Value>
                                                                        <InArgument x:TypeArguments="x:Int32">
                                                                          <mca:CSharpValue x:TypeArguments="x:Int32">BanderasCircunferencia.Count-1</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </Assign.Value>
                                                                    </Assign>
                                                                  </If.Then>
                                                                </If>
                                                              </Sequence>
                                                            </If.Then>
                                                            <If.Else>
                                                              <Assign>
                                                                <Assign.To>
                                                                  <OutArgument x:TypeArguments="x:Int32">
                                                                    <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                                  </OutArgument>
                                                                </Assign.To>
                                                                <Assign.Value>
                                                                  <InArgument x:TypeArguments="x:Int32">
                                                                    <mca:CSharpValue x:TypeArguments="x:Int32">(Cursor + 1) % BanderasCircunferencia.Count</mca:CSharpValue>
                                                                  </InArgument>
                                                                </Assign.Value>
                                                              </Assign>
                                                            </If.Else>
                                                          </If>
                                                        </Sequence>
                                                      </Transition.Action>
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("1") || RtaCave.Equals("3")</mca:CSharpValue>
                                                      </Transition.Condition>
                                                    </Transition>
                                                    <Transition Trigger="{x:Reference __ReferenceID6}" DisplayName="Eligio bandera" To="{x:Reference __ReferenceID7}">
                                                      <Transition.Action>
                                                        <Sequence DisplayName="Termino de elegir">
                                                          <If>
                                                            <If.Condition>
                                                              <InArgument x:TypeArguments="x:Boolean">
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">Iteracion.CompareTo(Color.Length)&lt;0</mca:CSharpValue>
                                                              </InArgument>
                                                            </If.Condition>
                                                            <If.Then>
                                                              <WriteLine>
                                                                <InArgument x:TypeArguments="x:String">
                                                                  <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"" + Color[Iteracion] + "\" }"</mca:CSharpValue>
                                                                </InArgument>
                                                              </WriteLine>
                                                            </If.Then>
                                                            <If.Else>
                                                              <WriteLine>
                                                                <InArgument x:TypeArguments="x:String">
                                                                  <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"rojo\" }"</mca:CSharpValue>
                                                                </InArgument>
                                                              </WriteLine>
                                                            </If.Else>
                                                          </If>
                                                          <WriteLine DisplayName="WriteLine">
                                                            <InArgument x:TypeArguments="x:String">
                                                              <mca:CSharpValue x:TypeArguments="x:String">Mostrar180.Replace("true", "false")</mca:CSharpValue>
                                                            </InArgument>
                                                          </WriteLine>
                                                          <Assign>
                                                            <Assign.To>
                                                              <OutArgument x:TypeArguments="sd:PointF">
                                                                <mca:CSharpReference x:TypeArguments="sd:PointF">BanderaSeleccionadaPos</mca:CSharpReference>
                                                              </OutArgument>
                                                            </Assign.To>
                                                            <Assign.Value>
                                                              <InArgument x:TypeArguments="sd:PointF">
                                                                <mca:CSharpValue x:TypeArguments="sd:PointF">BanderasCircunferencia.ElementAt(Cursor)</mca:CSharpValue>
                                                              </InArgument>
                                                            </Assign.Value>
                                                          </Assign>
                                                          <Assign>
                                                            <Assign.To>
                                                              <OutArgument x:TypeArguments="x:Int32">
                                                                <mca:CSharpReference x:TypeArguments="x:Int32">BanderaSeleccionadaID</mca:CSharpReference>
                                                              </OutArgument>
                                                            </Assign.To>
                                                            <Assign.Value>
                                                              <InArgument x:TypeArguments="x:Int32">
                                                                <mca:CSharpValue x:TypeArguments="x:Int32">Cursor</mca:CSharpValue>
                                                              </InArgument>
                                                            </Assign.Value>
                                                          </Assign>
                                                        </Sequence>
                                                      </Transition.Action>
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("2")</mca:CSharpValue>
                                                      </Transition.Condition>
                                                    </Transition>
                                                  </State.Transitions>
                                                </State>
                                              </Transition.To>
                                              <Transition.Action>
                                                <Sequence>
                                                  <Assign>
                                                    <Assign.To>
                                                      <OutArgument x:TypeArguments="x:Int32">
                                                        <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                      </OutArgument>
                                                    </Assign.To>
                                                    <Assign.Value>
                                                      <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                                    </Assign.Value>
                                                  </Assign>
                                                  <WriteLine DisplayName="WriteLine">
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Choose the collected flag\" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <Delay>
                                                    <InArgument x:TypeArguments="x:TimeSpan">
                                                      <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(4)</mca:CSharpValue>
                                                    </InArgument>
                                                  </Delay>
                                                  <WriteLine Text="hide_question" />
                                                  <WriteLine DisplayName="WriteLine">
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\" \" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <WriteLine DisplayName="WriteLine">
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">Mostrar180</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                </Sequence>
                                              </Transition.Action>
                                              <Transition.Condition>
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">(Iteracion.CompareTo(Protocolo.Length) &lt; 0 &amp;&amp; Protocolo[Iteracion].Equals(2)) || ((TrainingFlag.Equals("P")))</mca:CSharpValue>
                                              </Transition.Condition>
                                            </Transition>
                                            <Transition Trigger="{x:Reference __ReferenceID4}" DisplayName="Protocolo 3">
                                              <Transition.To>
                                                <State x:Name="__ReferenceID8" DisplayName="Colocando Bandera">
                                                  <State.Exit>
                                                    <Sequence DisplayName="Salidas">
                                                      <Assign>
                                                        <Assign.To>
                                                          <OutArgument x:TypeArguments="x:String">
                                                            <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                          </OutArgument>
                                                        </Assign.To>
                                                        <Assign.Value>
                                                          <InArgument x:TypeArguments="x:String">
                                                            <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";PR3"</mca:CSharpValue>
                                                          </InArgument>
                                                        </Assign.Value>
                                                      </Assign>
                                                      <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                                                        <AddToCollection.Item>
                                                          <InArgument x:TypeArguments="x:String">
                                                            <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                          </InArgument>
                                                        </AddToCollection.Item>
                                                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                                        </InArgument>
                                                      </AddToCollection>
                                                      <WriteLine DisplayName="Pantalla">
                                                        <InArgument x:TypeArguments="x:String">
                                                          <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                        </InArgument>
                                                      </WriteLine>
                                                    </Sequence>
                                                  </State.Exit>
                                                  <State.Transitions>
                                                    <Transition DisplayName="Confirmar Posicion">
                                                      <Transition.Trigger>
                                                        <Sequence x:Name="__ReferenceID11" DisplayName="Recibir Coordenadas">
                                                          <local:ReadString BookmarkName="RtaCave">
                                                            <local:ReadString.Result>
                                                              <OutArgument x:TypeArguments="x:String">
                                                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                              </OutArgument>
                                                            </local:ReadString.Result>
                                                          </local:ReadString>
                                                          <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                                            <If.Condition>
                                                              <InArgument x:TypeArguments="x:Boolean">
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length&gt;1</mca:CSharpValue>
                                                              </InArgument>
                                                            </If.Condition>
                                                            <If.Then>
                                                              <Assign>
                                                                <Assign.To>
                                                                  <OutArgument x:TypeArguments="sd:PointF">
                                                                    <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                                  </OutArgument>
                                                                </Assign.To>
                                                                <Assign.Value>
                                                                  <InArgument x:TypeArguments="sd:PointF">
                                                                    <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                                  </InArgument>
                                                                </Assign.Value>
                                                              </Assign>
                                                            </If.Then>
                                                          </If>
                                                        </Sequence>
                                                      </Transition.Trigger>
                                                      <Transition.To>
                                                        <State x:Name="__ReferenceID10" DisplayName="Confirmando Ubicacion">
                                                          <State.Exit>
                                                            <Sequence>
                                                              <Assign>
                                                                <Assign.To>
                                                                  <OutArgument x:TypeArguments="x:String">
                                                                    <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                                  </OutArgument>
                                                                </Assign.To>
                                                                <Assign.Value>
                                                                  <InArgument x:TypeArguments="x:String">
                                                                    <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";CON"</mca:CSharpValue>
                                                                  </InArgument>
                                                                </Assign.Value>
                                                              </Assign>
                                                              <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                                                                <AddToCollection.Item>
                                                                  <InArgument x:TypeArguments="x:String">
                                                                    <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                  </InArgument>
                                                                </AddToCollection.Item>
                                                                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                                                </InArgument>
                                                              </AddToCollection>
                                                              <WriteLine DisplayName="Consola">
                                                                <InArgument x:TypeArguments="x:String">
                                                                  <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                </InArgument>
                                                              </WriteLine>
                                                            </Sequence>
                                                          </State.Exit>
                                                          <State.Transitions>
                                                            <Transition DisplayName="Borrar Bandera">
                                                              <Transition.Trigger>
                                                                <Sequence x:Name="__ReferenceID9" DisplayName="Recibir Coordenadas">
                                                                  <local:ReadString BookmarkName="RtaCave">
                                                                    <local:ReadString.Result>
                                                                      <OutArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </local:ReadString.Result>
                                                                  </local:ReadString>
                                                                  <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                                                    <If.Condition>
                                                                      <InArgument x:TypeArguments="x:Boolean">
                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length&gt;1</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </If.Condition>
                                                                    <If.Then>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="sd:PointF">
                                                                            <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="sd:PointF">
                                                                            <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                    </If.Then>
                                                                  </If>
                                                                </Sequence>
                                                              </Transition.Trigger>
                                                              <Transition.To>
                                                                <x:Reference>__ReferenceID8</x:Reference>
                                                              </Transition.To>
                                                              <Transition.Action>
                                                                <Sequence>
                                                                  <WriteLine Text="hide_question" />
                                                                  <WriteLine>
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(Cursor) + "\", \"visible\":\"false\" }"</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </WriteLine>
                                                                  <WriteLine DisplayName="WriteLine">
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Pulsa Y en la posicion\" }"</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </WriteLine>
                                                                  <Assign>
                                                                    <Assign.To>
                                                                      <OutArgument x:TypeArguments="x:Int32">
                                                                        <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </Assign.To>
                                                                    <Assign.Value>
                                                                      <InArgument x:TypeArguments="x:Int32">
                                                                        <mca:CSharpValue x:TypeArguments="x:Int32">Cursor+1</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </Assign.Value>
                                                                  </Assign>
                                                                </Sequence>
                                                              </Transition.Action>
                                                              <Transition.Condition>
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("1")</mca:CSharpValue>
                                                              </Transition.Condition>
                                                            </Transition>
                                                            <Transition Trigger="{x:Reference __ReferenceID9}" DisplayName="Eligio bandera" To="{x:Reference __ReferenceID7}">
                                                              <Transition.Action>
                                                                <Sequence>
                                                                  <WriteLine DisplayName="WriteLine">
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(Cursor) + "\", \"visible\":\"false\" }"</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </WriteLine>
                                                                  <Assign>
                                                                    <Assign.To>
                                                                      <OutArgument x:TypeArguments="x:Int32">
                                                                        <mca:CSharpReference x:TypeArguments="x:Int32">BanderaSeleccionadaID</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </Assign.To>
                                                                    <Assign.Value>
                                                                      <InArgument x:TypeArguments="x:Int32">
                                                                        <mca:CSharpValue x:TypeArguments="x:Int32">Cursor</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </Assign.Value>
                                                                  </Assign>
                                                                  <Assign>
                                                                    <Assign.To>
                                                                      <OutArgument x:TypeArguments="x:Int32">
                                                                        <mca:CSharpReference x:TypeArguments="x:Int32">BanderaNueva</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </Assign.To>
                                                                    <Assign.Value>
                                                                      <InArgument x:TypeArguments="x:Int32">
                                                                        <mca:CSharpValue x:TypeArguments="x:Int32">Cursor+1</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </Assign.Value>
                                                                  </Assign>
                                                                  <WriteLine DisplayName="WriteLine">
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <mca:CSharpValue x:TypeArguments="x:String">"N{ \"x\":\"0\", \"y\":\"0\", \"radius\":\""+Radio+"\" }"</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </WriteLine>
                                                                </Sequence>
                                                              </Transition.Action>
                                                              <Transition.Condition>
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("2")</mca:CSharpValue>
                                                              </Transition.Condition>
                                                            </Transition>
                                                            <Transition Trigger="{x:Reference __ReferenceID9}" DisplayName="Seguir Seleccionando" To="{x:Reference __ReferenceID10}">
                                                              <Transition.Condition>
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">!(RtaCave.Equals("1")||RtaCave.Equals("2"))</mca:CSharpValue>
                                                              </Transition.Condition>
                                                            </Transition>
                                                          </State.Transitions>
                                                        </State>
                                                      </Transition.To>
                                                      <Transition.Action>
                                                        <Sequence DisplayName="Agregar Nueva">
                                                          <Assign DisplayName="Posicion de la nueva Bandera">
                                                            <Assign.To>
                                                              <OutArgument x:TypeArguments="sd:PointF">
                                                                <mca:CSharpReference x:TypeArguments="sd:PointF">BanderaSeleccionadaPos</mca:CSharpReference>
                                                              </OutArgument>
                                                            </Assign.To>
                                                            <Assign.Value>
                                                              <InArgument x:TypeArguments="sd:PointF">
                                                                <mca:CSharpValue x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpValue>
                                                              </InArgument>
                                                            </Assign.Value>
                                                          </Assign>
                                                          <If>
                                                            <If.Condition>
                                                              <InArgument x:TypeArguments="x:Boolean">
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">Iteracion.CompareTo(Color.Length)&lt;0</mca:CSharpValue>
                                                              </InArgument>
                                                            </If.Condition>
                                                            <If.Then>
                                                              <WriteLine>
                                                                <InArgument x:TypeArguments="x:String">
                                                                  <mca:CSharpValue x:TypeArguments="x:String">"A{ \"id\":\"" + Cursor + "\", \"color\":\"" + Color[Iteracion] + "\", \"x\":\"" + Coordenadas.X.ToString(System.Globalization.CultureInfo.InvariantCulture).Replace(",", ".") + "\", \"y\":\"" + Coordenadas.Y.ToString(System.Globalization.CultureInfo.InvariantCulture).Replace(",", ".") + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                                                </InArgument>
                                                              </WriteLine>
                                                            </If.Then>
                                                            <If.Else>
                                                              <WriteLine>
                                                                <InArgument x:TypeArguments="x:String">
                                                                  <mca:CSharpValue x:TypeArguments="x:String">"A{ \"id\":\"" + Cursor + "\", \"color\":\"rojo\", \"x\":\"" + Coordenadas.X.ToString(System.Globalization.CultureInfo.InvariantCulture).Replace(",", ".") + "\", \"y\":\"" + Coordenadas.Y.ToString(System.Globalization.CultureInfo.InvariantCulture).Replace(",", ".") + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                                                </InArgument>
                                                              </WriteLine>
                                                            </If.Else>
                                                          </If>
                                                          <WriteLine Text="hide_question" />
                                                          <Delay>
                                                            <InArgument x:TypeArguments="x:TimeSpan">
                                                              <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(2)</mca:CSharpValue>
                                                            </InArgument>
                                                          </Delay>
                                                          <WriteLine DisplayName="WriteLine">
                                                            <InArgument x:TypeArguments="x:String">
                                                              <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Confirma la posicion: Y(si) o X(no)\" }"</mca:CSharpValue>
                                                            </InArgument>
                                                          </WriteLine>
                                                        </Sequence>
                                                      </Transition.Action>
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("2")</mca:CSharpValue>
                                                      </Transition.Condition>
                                                    </Transition>
                                                    <Transition Trigger="{x:Reference __ReferenceID11}" DisplayName="" To="{x:Reference __ReferenceID8}">
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">!RtaCave.Equals("2")</mca:CSharpValue>
                                                      </Transition.Condition>
                                                    </Transition>
                                                  </State.Transitions>
                                                </State>
                                              </Transition.To>
                                              <Transition.Action>
                                                <Sequence>
                                                  <WriteLine DisplayName="WriteLine">
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Coloca la bandera\" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <Delay>
                                                    <InArgument x:TypeArguments="x:TimeSpan">
                                                      <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(4)</mca:CSharpValue>
                                                    </InArgument>
                                                  </Delay>
                                                  <WriteLine Text="hide_question" />
                                                  <WriteLine DisplayName="WriteLine">
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Pulsa Y en la posicion\" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <Assign>
                                                    <Assign.To>
                                                      <OutArgument x:TypeArguments="x:Int32">
                                                        <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                      </OutArgument>
                                                    </Assign.To>
                                                    <Assign.Value>
                                                      <InArgument x:TypeArguments="x:Int32">
                                                        <mca:CSharpValue x:TypeArguments="x:Int32">BanderaNueva</mca:CSharpValue>
                                                      </InArgument>
                                                    </Assign.Value>
                                                  </Assign>
                                                  <WriteLine DisplayName="WriteLine">
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"O{ \"x\":\"0\", \"y\":\"0\", \"radius\":\""+Radio+"\" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                </Sequence>
                                              </Transition.Action>
                                              <Transition.Condition>
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">Iteracion.CompareTo(Protocolo.Length) &lt; 0 &amp;&amp; Protocolo[Iteracion].Equals(3)</mca:CSharpValue>
                                              </Transition.Condition>
                                            </Transition>
                                          </State.Transitions>
                                        </State>
                                      </Transition.To>
                                      <Transition.Action>
                                        <Sequence DisplayName="Termino de recolectar el par">
                                          <Assign>
                                            <Assign.To>
                                              <OutArgument x:TypeArguments="x:Int32">
                                                <mca:CSharpReference x:TypeArguments="x:Int32">IRecoleccion</mca:CSharpReference>
                                              </OutArgument>
                                            </Assign.To>
                                            <Assign.Value>
                                              <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                            </Assign.Value>
                                          </Assign>
                                          <Sequence DisplayName="Salida">
                                            <Assign>
                                              <Assign.To>
                                                <OutArgument x:TypeArguments="x:String">
                                                  <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                </OutArgument>
                                              </Assign.To>
                                              <Assign.Value>
                                                <InArgument x:TypeArguments="x:String">
                                                  <mca:CSharpValue x:TypeArguments="x:String">"Inicio test memoria;" + DateTime.Now.ToString()</mca:CSharpValue>
                                                </InArgument>
                                              </Assign.Value>
                                            </Assign>
                                            <AddToCollection x:TypeArguments="x:String" DisplayName="Reporte">
                                              <AddToCollection.Item>
                                                <InArgument x:TypeArguments="x:String">
                                                  <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                </InArgument>
                                              </AddToCollection.Item>
                                              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                              </InArgument>
                                            </AddToCollection>
                                            <WriteLine>
                                              <InArgument x:TypeArguments="x:String">
                                                <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                              </InArgument>
                                            </WriteLine>
                                          </Sequence>
                                        </Sequence>
                                      </Transition.Action>
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">((Math.Sqrt(Math.Pow(Coordenadas.X - Cruz.X, 2) + Math.Pow(Coordenadas.Y - Cruz.Y, 2))) &lt; Cercania) &amp;&amp; (IRecoleccion.Equals(2)||(TrainingFlag.Equals("P"))) &amp;&amp; (!(Evaluar[Iteracion].Equals(2)) || (TrainingFlag.Equals("P")))</mca:CSharpValue>
                                      </Transition.Condition>
                                    </Transition>
                                    <Transition Trigger="{x:Reference __ReferenceID12}" DisplayName="Recolectar Una Mas" To="{x:Reference __ReferenceID13}">
                                      <Transition.Action>
                                        <Sequence>
                                          <Sequence DisplayName="Salidas">
                                            <Assign>
                                              <Assign.To>
                                                <OutArgument x:TypeArguments="x:String">
                                                  <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                </OutArgument>
                                              </Assign.To>
                                              <Assign.Value>
                                                <InArgument x:TypeArguments="x:String">
                                                  <mca:CSharpValue x:TypeArguments="x:String">"Hora Centro;" + DateTime.Now.ToString()</mca:CSharpValue>
                                                </InArgument>
                                              </Assign.Value>
                                            </Assign>
                                            <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                                              <AddToCollection.Item>
                                                <InArgument x:TypeArguments="x:String">
                                                  <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                </InArgument>
                                              </AddToCollection.Item>
                                              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                              </InArgument>
                                            </AddToCollection>
                                            <WriteLine DisplayName="Pantalla">
                                              <InArgument x:TypeArguments="x:String">
                                                <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                              </InArgument>
                                            </WriteLine>
                                          </Sequence>
                                          <If DisplayName="Cuando hay que mostrar de a una bandera">
                                            <If.Condition>
                                              <InArgument x:TypeArguments="x:Boolean">
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">AparecePar[Iteracion].Equals("N")</mca:CSharpValue>
                                              </InArgument>
                                            </If.Condition>
                                            <If.Then>
                                              <Sequence DisplayName="Mostrar bandera derecha">
                                                <WriteLine DisplayName="WriteLine">
                                                  <InArgument x:TypeArguments="x:String">
                                                    <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + idDerecha + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                                  </InArgument>
                                                </WriteLine>
                                                <Assign DisplayName="Ponerla Visible">
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:Int32">
                                                      <mca:CSharpReference x:TypeArguments="x:Int32">ParBanderasVisible[1]</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:Int32">1</InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                              </Sequence>
                                            </If.Then>
                                          </If>
                                          <Sequence DisplayName="Cambiar la Cruz de Color">
                                            <WriteLine>
                                              <InArgument x:TypeArguments="x:String">
                                                <mca:CSharpValue x:TypeArguments="x:String">"X{ \"value\":\"rojo\" }"</mca:CSharpValue>
                                              </InArgument>
                                            </WriteLine>
                                            <Delay>
                                              <InArgument x:TypeArguments="x:TimeSpan">
                                                <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(1);</mca:CSharpValue>
                                              </InArgument>
                                            </Delay>
                                            <WriteLine>
                                              <InArgument x:TypeArguments="x:String">
                                                <mca:CSharpValue x:TypeArguments="x:String">"X{ \"value\":\"negro\" }"</mca:CSharpValue>
                                              </InArgument>
                                            </WriteLine>
                                          </Sequence>
                                        </Sequence>
                                      </Transition.Action>
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">((Math.Sqrt(Math.Pow(Coordenadas.X - Cruz.X, 2) + Math.Pow(Coordenadas.Y - Cruz.Y, 2))) &lt; Cercania) &amp;&amp; (IRecoleccion.CompareTo(2) &lt; 0 &amp;&amp;(TrainingFlag.Equals("T")))</mca:CSharpValue>
                                      </Transition.Condition>
                                    </Transition>
                                    <Transition Trigger="{x:Reference __ReferenceID12}" DisplayName="No paso por el centro" To="{x:Reference __ReferenceID14}">
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">!((Math.Sqrt(Math.Pow(Coordenadas.X - Cruz.X, 2) + Math.Pow(Coordenadas.Y - Cruz.Y, 2))) &lt; Cercania)</mca:CSharpValue>
                                      </Transition.Condition>
                                    </Transition>
                                    <Transition Trigger="{x:Reference __ReferenceID12}" DisplayName="Terminar sin test de memoria" To="{x:Reference __ReferenceID15}">
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">((Math.Sqrt(Math.Pow(Coordenadas.X - Cruz.X, 2) + Math.Pow(Coordenadas.Y - Cruz.Y, 2))) &lt; Cercania) &amp;&amp; (IRecoleccion.Equals(2)) &amp;&amp; (Iteracion.CompareTo(Evaluar.Length) &lt; 0 &amp;&amp; Evaluar[Iteracion].Equals(2))</mca:CSharpValue>
                                      </Transition.Condition>
                                    </Transition>
                                  </State.Transitions>
                                </State>
                              </Transition.To>
                              <Transition.Action>
                                <Sequence DisplayName="Recolectar">
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:Int32">
                                        <mca:CSharpReference x:TypeArguments="x:Int32">IRecoleccion</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:Int32">
                                        <mca:CSharpValue x:TypeArguments="x:Int32">IRecoleccion+1</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <If>
                                    <If.Condition>
                                      <InArgument x:TypeArguments="x:Boolean">
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">(ParBanderasVisible[0].Equals(1) &amp;&amp; ((Math.Sqrt(Math.Pow(Coordenadas.X - BanderasCircunferencia.ElementAt(idIzquierda).X, 2) + Math.Pow(Coordenadas.Y - BanderasCircunferencia.ElementAt(idIzquierda).Y, 2))) &lt; Cercania))</mca:CSharpValue>
                                      </InArgument>
                                    </If.Condition>
                                    <If.Then>
                                      <Sequence>
                                        <Assign DisplayName="Oculatar Bandera Izquierda">
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Int32">
                                              <mca:CSharpReference x:TypeArguments="x:Int32">ParBanderasVisible[0]</mca:CSharpReference>
                                            </OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                        <WriteLine DisplayName="WriteLine">
                                          <InArgument x:TypeArguments="x:String">
                                            <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + idIzquierda + "\", \"visible\":\"false\" }"</mca:CSharpValue>
                                          </InArgument>
                                        </WriteLine>
                                        <Sequence DisplayName="Salidas">
                                          <Assign>
                                            <Assign.To>
                                              <OutArgument x:TypeArguments="x:String">
                                                <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                              </OutArgument>
                                            </Assign.To>
                                            <Assign.Value>
                                              <InArgument x:TypeArguments="x:String">
                                                <mca:CSharpValue x:TypeArguments="x:String">"Captura Bandera;" + idIzquierda + "\n" + "Hora;" + DateTime.Now.ToString()</mca:CSharpValue>
                                              </InArgument>
                                            </Assign.Value>
                                          </Assign>
                                          <AddToCollection x:TypeArguments="x:String" DisplayName="Reporte">
                                            <AddToCollection.Item>
                                              <InArgument x:TypeArguments="x:String">
                                                <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                              </InArgument>
                                            </AddToCollection.Item>
                                            <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                            </InArgument>
                                          </AddToCollection>
                                        </Sequence>
                                      </Sequence>
                                    </If.Then>
                                    <If.Else>
                                      <If>
                                        <If.Condition>
                                          <InArgument x:TypeArguments="x:Boolean">
                                            <mca:CSharpValue x:TypeArguments="x:Boolean">(ParBanderasVisible[1].Equals(1) &amp;&amp; (Math.Sqrt(Math.Pow(Coordenadas.X - BanderasCircunferencia.ElementAt(idDerecha).X, 2)+ Math.Pow(Coordenadas.Y - BanderasCircunferencia.ElementAt(idDerecha).Y, 2))) &lt; Cercania)</mca:CSharpValue>
                                          </InArgument>
                                        </If.Condition>
                                        <If.Then>
                                          <Sequence>
                                            <Assign DisplayName="Oculatar Bandera Izquierda">
                                              <Assign.To>
                                                <OutArgument x:TypeArguments="x:Int32">
                                                  <mca:CSharpReference x:TypeArguments="x:Int32">ParBanderasVisible[1]</mca:CSharpReference>
                                                </OutArgument>
                                              </Assign.To>
                                              <Assign.Value>
                                                <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                              </Assign.Value>
                                            </Assign>
                                            <WriteLine DisplayName="WriteLine">
                                              <InArgument x:TypeArguments="x:String">
                                                <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + idDerecha + "\", \"visible\":\"false\" }"</mca:CSharpValue>
                                              </InArgument>
                                            </WriteLine>
                                            <Sequence DisplayName="Salidas">
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">"Captura Bandera;" + idDerecha + "\n"
                + "Hora;" + DateTime.Now.ToString()</mca:CSharpValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                              <AddToCollection x:TypeArguments="x:String" DisplayName="Reporte">
                                                <AddToCollection.Item>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                  </InArgument>
                                                </AddToCollection.Item>
                                                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                                </InArgument>
                                              </AddToCollection>
                                            </Sequence>
                                          </Sequence>
                                        </If.Then>
                                      </If>
                                    </If.Else>
                                  </If>
                                </Sequence>
                              </Transition.Action>
                              <Transition.Condition>
                                <mca:CSharpValue x:TypeArguments="x:Boolean">(ParBanderasVisible[0].Equals(1) &amp;&amp; ((Math.Sqrt(Math.Pow(Coordenadas.X - BanderasCircunferencia.ElementAt(idIzquierda).X, 2) + Math.Pow(Coordenadas.Y - BanderasCircunferencia.ElementAt(idIzquierda).Y, 2))) &lt; Cercania)) || (ParBanderasVisible[1].Equals(1) &amp;&amp; (Math.Sqrt(Math.Pow(Coordenadas.X - BanderasCircunferencia.ElementAt(idDerecha).X, 2) + Math.Pow(Coordenadas.Y - BanderasCircunferencia.ElementAt(idDerecha).Y, 2))) &lt; Cercania)</mca:CSharpValue>
                              </Transition.Condition>
                            </Transition>
                            <Transition Trigger="{x:Reference __ReferenceID16}" DisplayName="No recolecto" To="{x:Reference __ReferenceID13}">
                              <Transition.Condition>
                                <mca:CSharpValue x:TypeArguments="x:Boolean">!((ParBanderasVisible[0].Equals(1) &amp;&amp; ((Math.Sqrt(Math.Pow(Coordenadas.X - BanderasCircunferencia.ElementAt(idIzquierda).X, 2) - Math.Pow(Coordenadas.Y - BanderasCircunferencia.ElementAt(idIzquierda).Y, 2))) &lt; Cercania)) || (ParBanderasVisible[1].Equals(1) &amp;&amp; (Math.Sqrt(Math.Pow(Coordenadas.X - BanderasCircunferencia.ElementAt(idDerecha).X, 2) - Math.Pow(Coordenadas.Y - BanderasCircunferencia.ElementAt(idDerecha).Y, 2))) &lt; Cercania))</mca:CSharpValue>
                              </Transition.Condition>
                            </Transition>
                          </State.Transitions>
                        </State>
                      </Transition.To>
                      <Transition.Action>
                        <Sequence>
                          <If>
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">Iteracion.CompareTo(AparecePar.Length)&lt;0 &amp;&amp; AparecePar[Iteracion].Equals("S") &amp;&amp; !TrainingFlag.Equals("P")</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Sequence>
                                <WriteLine>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + idIzquierda + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                  </InArgument>
                                </WriteLine>
                                <WriteLine>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + idDerecha + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                  </InArgument>
                                </WriteLine>
                                <Sequence DisplayName="Visible Invisible">
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="s:Int32[]">
                                        <mca:CSharpReference x:TypeArguments="s:Int32[]">ParBanderasVisible</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="s:Int32[]">
                                        <mca:CSharpValue x:TypeArguments="s:Int32[]">new int [2]</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:Int32">
                                        <mca:CSharpReference x:TypeArguments="x:Int32">ParBanderasVisible[0]</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:Int32">1</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:Int32">
                                        <mca:CSharpReference x:TypeArguments="x:Int32">ParBanderasVisible[1]</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:Int32">1</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </Sequence>
                            </If.Then>
                            <If.Else>
                              <Sequence>
                                <WriteLine DisplayName="WriteLine">
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + idIzquierda + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                  </InArgument>
                                </WriteLine>
                                <Sequence DisplayName="Visible Invisible">
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="s:Int32[]">
                                        <mca:CSharpReference x:TypeArguments="s:Int32[]">ParBanderasVisible</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="s:Int32[]">
                                        <mca:CSharpValue x:TypeArguments="s:Int32[]">new int [2]</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:Int32">
                                        <mca:CSharpReference x:TypeArguments="x:Int32">ParBanderasVisible[0]</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:Int32">1</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:Int32">
                                        <mca:CSharpReference x:TypeArguments="x:Int32">ParBanderasVisible[1]</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </Sequence>
                            </If.Else>
                          </If>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">
                                <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";NULL;NULL;NULL;REC"</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                            <AddToCollection.Item>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                              </InArgument>
                            </AddToCollection.Item>
                            <InArgument x:TypeArguments="scg:ICollection(x:String)">
                              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                            </InArgument>
                          </AddToCollection>
                          <WriteLine DisplayName="Mostrar por Consola">
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                            </InArgument>
                          </WriteLine>
                        </Sequence>
                      </Transition.Action>
                      <Transition.Condition>
                        <mca:CSharpValue x:TypeArguments="x:Boolean">((Iteracion.CompareTo(Evaluar.Length)&lt;0)&amp;&amp;(Evaluar[Iteracion].Equals(1) || Evaluar[Iteracion].Equals(2)))||(TrainingFlag.Equals("P"))</mca:CSharpValue>
                      </Transition.Condition>
                    </Transition>
                    <Transition Trigger="{x:Reference __ReferenceID17}" DisplayName="Solo evaluar" To="{x:Reference __ReferenceID18}">
                      <Transition.Condition>
                        <mca:CSharpValue x:TypeArguments="x:Boolean">TrainingFlag.Equals("T")&amp;&amp; Iteracion.CompareTo(Evaluar.Length)&lt;0 &amp;&amp; Evaluar[Iteracion].Equals(3)</mca:CSharpValue>
                      </Transition.Condition>
                    </Transition>
                  </State.Transitions>
                </State>
              </Transition.To>
              <Transition.Action>
                <Sequence>
                  <WriteLine>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">Agregar180</mca:CSharpValue>
                    </InArgument>
                  </WriteLine>
                  <Assign>
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";NULL;NULL;NULL;INI"</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                    <AddToCollection.Item>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                      </InArgument>
                    </AddToCollection.Item>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection>
                  <WriteLine DisplayName="Mostrar por Consola">
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                    </InArgument>
                  </WriteLine>
                </Sequence>
              </Transition.Action>
            </Transition>
          </State.Transitions>
        </State>
      </StateMachine.InitialState>
      <x:Reference>__ReferenceID19</x:Reference>
      <x:Reference>__ReferenceID1</x:Reference>
      <x:Reference>__ReferenceID13</x:Reference>
      <x:Reference>__ReferenceID14</x:Reference>
      <x:Reference>__ReferenceID18</x:Reference>
      <x:Reference>__ReferenceID15</x:Reference>
      <x:Reference>__ReferenceID20</x:Reference>
      <x:Reference>__ReferenceID5</x:Reference>
      <x:Reference>__ReferenceID8</x:Reference>
      <x:Reference>__ReferenceID7</x:Reference>
      <x:Reference>__ReferenceID10</x:Reference>
      <x:Reference>__ReferenceID3</x:Reference>
      <StateMachine.Variables>
        <Variable x:TypeArguments="x:Int32" Name="IRecoleccion" />
        <Variable x:TypeArguments="x:Int32" Name="Iteracion" />
        <Variable x:TypeArguments="x:Int32" Name="MaxIteracion" />
        <Variable x:TypeArguments="x:String" Name="RtaCave" />
        <Variable x:TypeArguments="sd:PointF" Name="Coordenadas" />
        <Variable x:TypeArguments="s:Int32[]" Name="ParBanderasVisible" />
        <Variable x:TypeArguments="x:Int32" Name="idIzquierda" />
        <Variable x:TypeArguments="x:Int32" Name="idDerecha" />
        <Variable x:TypeArguments="x:Int32" Name="Cercania" />
        <Variable x:TypeArguments="sd:PointF" Name="Cruz" />
        <Variable x:TypeArguments="x:Int32" Name="Cursor" />
        <Variable x:TypeArguments="sd:PointF" Name="BanderaSeleccionadaPos" />
        <Variable x:TypeArguments="x:Int32" Name="BanderaSeleccionadaID" />
        <Variable x:TypeArguments="x:Int32" Name="idMedio" />
        <Variable x:TypeArguments="x:Int32" Name="BanderaNueva" />
        <Variable x:TypeArguments="x:String" Name="Mensaje" />
        <Variable x:TypeArguments="scg:List(sd:PointF)" Name="PosicionCruz" />
      </StateMachine.Variables>
      <sads:DebugSymbol.Symbol></sads:DebugSymbol.Symbol>
    </StateMachine>
  </local:Ejercicio.Implementation>
</local:Ejercicio>